import path from 'path'
import fs from 'fs'

import mpvAPI from 'node-mpv'
import nativeMessage from 'chrome-native-messaging'
import pFinally from 'p-finally'
// import { YouTubeURLParser } from '@iktakahiro/youtube-url-parser'
import {YouTubeURLParser } from './parsertest.lsc' //TODO:remove this and its file when done

import { logger } from './logging.lsc'

import { videoNoTimeStamp, videoWithTimeStamp } from './debugMockData.lsc' //TODO: REMOVE THIS and switch to orig if my PR is accepted

type MpvOptions = {
  volume: number,
  alwaysOnTop: boolean,
  videoQuality: string,
  defaultMpvWindowSize: string,
  dontLetYTpageVideoAutoLoad: boolean,
  oscStyle: string,
  startMPVpaused: boolean
};
type NativeMessage = {
  url: string,
  cookies: string,
  mpvOptions: MpvOptions
};
mpvPath = path.join(process.cwd(), 'mpv.exe')
// input = new nativeMessage.Input()
// transform = new nativeMessage.Transform(messageHandler)
// output = new nativeMessage.Output()

// process.stdin
//   .pipe(input)
//   .pipe(transform)
//   .pipe(output)
//   .pipe(process.stdout)

//TODO: remove this
// messageHandler(videoWithTimeStamp, null, () -> return)
messageHandler(videoNoTimeStamp, null, () -> return)

messageHandler({url, cookies, mpvOptions}: NativeMessage, push, done):void ->
  logger.debug('messageHandler ')
  logger.debug(url)
  logger.debug(cookies)
  logger.debug(mpvOptions)

  ytParser = new YouTubeURLParser(url)

  if !ytParser.isValid(url): return

  cookiesFilePath = createCookiesFile(cookies)
  mpv = createNewMpvInstance(mpvOptions, cookiesFilePath)

  mpv.on('crashed', () ->
    logger.error('mpv crashed')
    done()
  )

  pFinally(
    mpv.start()
      .then(() -> mpv.volume(mpvOptions.volume))
      .then(() -> mpv.load(cleanYoutubeUrl(url)))
      .then(() ->
        videoStartPosition = ytParser.getStartAtSecond()
        // If it's 10 seconds or less then it's not worth skipping ahead
        if videoStartPosition > 10:
          mpv.goToPosition(videoStartPosition)
      )
      .then(() ->
        if mpvOptions.startMPVpaused: mpv.pause()
      )
    , done
  )
  .catch(logger.error)

createNewMpvInstance(mpvOptions:MpvOptions, cookiesFilePath:string) ->
  new mpvAPI(
    {'binary': mpvPath},
    [
      '--cookies',
      `--cookies-file="${ cookiesFilePath }"`,
      `--ytdl-raw-options=cookies="${ cookiesFilePath }"`,
        generateScriptOpts(mpvOptions.oscStyle),
        mpvOptions.alwaysOnTop ? `--ontop` : ``,
        generateYTvideoQualityOpts(mpvOptions.videoQuality),
        generateMPVwindowSizeOpts(mpvOptions.defaultMpvWindowSize)
    ]
  )

generateMPVwindowSizeOpts(defaultMpvWindowSize:string):string ->
  if defaultMpvWindowSize === 'off': return ``
  `--autofit=${ defaultMpvWindowSize }`

generateYTvideoQualityOpts(videoQuality:string):string ->
  if videoQuality === 'original': return ``
  `--ytdl-format=${ videoQuality }`

generateScriptOpts(osc:string):string ->
  if osc === 'box': `--script-opts=osc-layout=box,osc-scalewindowed=1.2`
  else: `--script-opts=osc-scalewindowed=1.2`

createCookiesFile(cookies:string):string ->
  cookiesFilePath = path.join(process.cwd(), 'cookies.txt')
  fs.writeFileSync(cookiesFilePath, cookies)
  cookiesFilePath

/*****
* I had some issues with mpv where if the youtube url had stuff at the end of it -
* e.g. https://www.youtube.com/watch?v=WUC863mOtTc&feature=youtu.be&t=2398, then
* mpv would seem to ignore any command line flags after the url, so gonna clean it.
*/
cleanYoutubeUrl(url:string):string ->
  parser = new YouTubeURLParser(url)
  `https://www.youtube.com/watch?v=${ parser.getId() }`


process.on('unhandledRejection', logger.error)
process.on('uncaughtException', logger.error)
