import path from 'path'
import fs from 'fs'
import crypto from 'crypto'

import mpvAPI from 'node-mpv'
import nativeMessage from 'chrome-native-messaging'
import pFinally from 'p-finally'
// import { YouTubeURLParser } from '@iktakahiro/youtube-url-parser'
import {YouTubeURLParser } from './YoutubeParser.lsc'
import { logger } from './logging.lsc'

type MpvOptions = {
  volume: number,
  alwaysOnTop: boolean,
  videoQuality: string,
  defaultMpvWindowSize: string,
  dontLetYTpageVideoAutoLoad: boolean,
  oscStyle: string,
  startMPVpaused: boolean
};
type NativeMessage = {
  url: string,
  cookies: string,
  mpvOptions: MpvOptions
};
mpvPath = path.join(process.cwd(), 'mpv.exe')
cookiesFilePath = path.join(process.cwd(), 'cookies.txt')

input = new nativeMessage.Input()
transform = new nativeMessage.Transform(messageHandler)
output = new nativeMessage.Output()

/*****
* Based on https://github.com/winneon/watch-with-mpv/blob/master/native/native.js
*/
messageHandler({url, cookies, mpvOptions}: NativeMessage, push, done):void ->
  ytParser = new YouTubeURLParser(url)

  if !ytParser.isValid(url): return

  createCookiesFile(cookies)
  mpvPlayer = createNewMpvInstance(mpvOptions)

  pFinally(
    mpvPlayer.start()
      .then(() -> mpvPlayer.volume(mpvOptions.volume))
      .then(() -> mpvPlayer.load(cleanYoutubeUrl(url)))
      .then(() ->
        videoStartPosition = ytParser.getStartAtSecond()
        // If it's 10 seconds or less then it's not worth skipping ahead
        if videoStartPosition > 10:
          mpvPlayer.goToPosition(videoStartPosition)
      )
      .then(() ->
        if mpvOptions.startMPVpaused: mpvPlayer.pause()
      )
    , done
  )
  .catch(logger.error)

  mpvPlayer.on('crashed', () ->
    logger.error('mpv crashed')
    done()
    setTimeout(() -> process.exit(1), 3000)
  )

createNewMpvInstance(mpvOptions:MpvOptions) ->
  new mpvAPI(
    {
      binary: mpvPath,
      'ipc_command': '--input-ipc-server',
      socket: `\\\\.\\pipe\\mpvserver${ generateRandomString() }`,
    },
    [
      '--cookies',
      `--cookies-file="${ cookiesFilePath }"`,
      `--ytdl-raw-options=cookies="${ cookiesFilePath }"`,
        generateScriptOpts(mpvOptions.oscStyle),
        mpvOptions.alwaysOnTop ? `--ontop` : ``,
        generateYTvideoQualityOpts(mpvOptions.videoQuality),
        generateMPVwindowSizeOpts(mpvOptions.defaultMpvWindowSize)
    ]
  )

generateRandomString():string ->
  crypto.randomBytes(8).toString('hex')

generateMPVwindowSizeOpts(defaultMpvWindowSize:string):string ->
  defaultMpvWindowSize === 'off' ? `` : `--autofit=${ defaultMpvWindowSize }`

generateYTvideoQualityOpts(videoQuality:string):string ->
  videoQuality === 'original' ? `` : `--ytdl-format=${ videoQuality }`

generateScriptOpts(osc:string):string ->
  if osc === 'box': return `--script-opts=osc-layout=box,osc-scalewindowed=1.2`
  `--script-opts=osc-scalewindowed=1.2`

createCookiesFile(cookies:string):string ->
  fs.writeFileSync(cookiesFilePath, cookies)

/*****
* I had some issues with mpv where if the youtube url had stuff at the end of it -
* e.g. https://www.youtube.com/watch?v=WUC863mOtTc&feature=youtu.be&t=2398, then
* mpv would seem to ignore any command line flags after the url, so gonna clean it.
*/
cleanYoutubeUrl(url:string):string ->
  parser = new YouTubeURLParser(url)
  `https://www.youtube.com/watch?v=${ parser.getId() }`

process.stdin.pipe(input).pipe(transform).pipe(output).pipe(process.stdout)
process.on('unhandledRejection', logger.error)
process.on('uncaughtException', logger.error)
